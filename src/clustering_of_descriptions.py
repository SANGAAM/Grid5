# -*- coding: utf-8 -*-
"""clustering_of_descriptions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F4p7qC5X_RwTmJVa5l-hJTGLm4syJiYo
"""

import numpy as np
import spacy
import pandas as pd
from flask import Flask, render_template, request, jsonify
from flask_cors import CORS
app = Flask(__name__)
CORS(app)


file = pd.read_csv('newegg.csv')
df_description = pd.DataFrame(data=file, columns=['brand_name','items_Description','ratings','prices','Category'])
# print(df_description.items_Description)
nlp = spacy.load("en_core_web_md")
tuple_sentences = tuple(df_description['items_Description'])
sentence_vectors = [nlp(sentence).vector for sentence in tuple_sentences]
df_description.drop(columns=['brand_name','ratings','prices','Category'],axis=1,inplace=True)
print(df_description)

print(len(sentence_vectors))

import numpy as np
from sklearn.cluster import KMeans
from sklearn.metrics import pairwise_distances_argmin_min

# Number of clusters
num_clusters = 7
sentence_vectors = np.array(sentence_vectors).reshape(2705,300,)
# Perform K-means clustering
kmeans = KMeans(n_clusters=num_clusters,n_init=10)
kmeans.fit(sentence_vectors)

#Test the string you want to
#First vectorize using spacy
#use kmeans.predict to test that vectorized description
def fetch_recomm(keyword):
    string = keyword #from the product page
    num_of_neighbours = 5
    test_data = []
    string_vectorized = nlp(string).vector
    test_data.append(string_vectorized)
    test_data = np.array(test_data)
    test_cluster = kmeans.predict(test_data.reshape(1,-1))
# Get the indices of data points in the same cluster
    cluster_indices = np.where(kmeans.labels_ == test_cluster)[0]
# Calculate distances between the test data point and all data points in the cluster
    distances = np.linalg.norm(sentence_vectors[cluster_indices] - test_data, axis=1)
# Find the closest data points (nearest neighbors)
    closest_indices = cluster_indices[np.argsort(distances)[:num_of_neighbours]]
# Print the indices of the closest data points
    print("Indices of Closest Data Points:", closest_indices)
    cluster_terms = []
    for i in closest_indices:
        cluster_terms.append(df_description.iloc[i]['items_Description'] + '\n')
    for i in closest_indices:
        print(df_description.iloc[i]['items_Description'] + '\n')
    print(cluster_terms)
    return cluster_terms
fetch_recomm("asus")
@app.route("/get_recommendations", methods=['POST'])
def get_recommendations():
    keyword = request.json['keyword']
    recommendations = fetch_recomm(keyword)
    return jsonify(recommendations)
if __name__ == '__main__':
    app.run(debug=True)